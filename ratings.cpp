//
// Created by danie on 4/30/2021.
//
#include "program.h"

using namespace std;

// row 0 is the side of the current player
const float ratingMultiplier[ELEMENT_TYPES][ROWS][COLS] = {
        {
                {0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
                {0.5,  1.0,  1.0, -2.0, -2.0, 1.0, 1.0,  0.5},
                {0.5,  -0.5, -1.0, 0.0,  0.0,  -1.0, -0.5, 0.5},
                {0.0,  0.0,  0.0,  2.5,  2.5,  0.0,  0.0,  0.0},
                {0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5},
                {1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0},
                {5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0},
                {0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
        },

        {
                {-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0},
                {-1.0, 0.5,  0.0, 0.0,  0.0,  0.0, 0.5,  -1.0},
                {-1.0, 1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  -1.0},
                {-1.0, 0.0,  1.0,  1.0,  1.0,  1.0,  0.0,  -1.0},
                {-1.0, 0.5,  0.5,  1.0,  1.0,  0.5,  0.5,  -1.0},
                {-1.0, 0.0,  0.5,  1.0,  1.0,  0.5,  0.0,  -1.0},
                {-1.0, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -1.0},
                {-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0},
        },

        {
                {-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0},
                {-2.0, -2.0, 0.0, 0.5,  0.5,  0.0, -2.0, -4.0},
                {-3.0, 0.5,  1.0,  1.5,  1.5,  1.0,  0.3,  -3.0},
                {-3.0, 0.0,  1.5,  2.0,  2.0,  1.5,  0.0,  -3.0},
                {-3.0, 0.5,  1.5,  2.0,  2.0,  1.5,  0.5,  -3.0},
                {-3.0, 0.0,  1.0,  1.5,  1.5,  1.0,  0.0,  -3.0},
                {-4.0, -2.0, 0.0,  0.0,  0.0,  0.0,  -2.0, -4.0},
                {-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0},
        },

        {
                {0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0},
                {-0.5, 0.0,  0.0, 0.0,  0.0,  0.0, 0.0,  -0.5},
                {-0.5, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -0.5},
                {-0.5, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -0.5},
                {-0.5, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -0.5},
                {-0.5, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -0.5},
                {0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5},
                {0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
        },

        {
                {-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0},
                {-1.0, 0.0,  0.5, 0.0,  0.0,  0.0, 0.0,  -1.0},
                {-1.0, 0.5,  0.5,  0.5,  0.5,  0.5,  0.0,  -1.0},
                {0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0,  -0.5},
                {-0.5, 0.0,  0.5,  0.5,  0.5,  0.5,  0.0,  -0.5},
                {-1.0, 0.0,  0.5,  0.5,  0.5,  0.5,  0.0,  -1.0},
                {-1.0, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -1.0},
                {-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0},
        },

        {
                {2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0},
                {2.0,  2.0,  0.0, 0.0,  0.0,  0.0, 2.0,  2.0},
                {-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0},
                {-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0},
                {-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                {-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                {-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                {-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
        },

};

// RATINGS -----------------------------------------------------------------------------

inline float getPieceRating(piece *p, int row, int col) {
    return (p->isWhite ? 1.0f : -1.0f) * (pieceRatings[p->id] + (!p->isWhite ? ratingMultiplier[p->id][row][col] : ratingMultiplier[p->id][ROWS - row - 1][col]));
}

float Board::getRating() {
    // TODO add O(1) rating function
    float curRating = 0.0;
    for (int r = 0; r < ROWS; ++r)
        for (int c = 0; c < COLS; ++c) {
            if (this->board[r][c] != nullptr) {
                // ::getRating is for a global function
                curRating += ::getPieceRating(this->board[r][c], r, c);
            }
        }
    return curRating;
}

// GETTING THREATS -----------------------------------------------------------------------------

